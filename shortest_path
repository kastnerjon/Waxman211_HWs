#include<iostream>
using namespace std;

const int rows = 5;
const int cols = 6;

int m[5][6] = {0};
int path[cols];

int min (int x, int y, int z){
    int a[3]={x, y, z};
    int min = a[0];
    for (int i=1; i<3; i++)
        if (a[i] < min) min = a[i];
    return min;
}
int minIndex (int x, int y, int z){
    int a[3]={x, y, z};
    int min = 0;
    for (int i=1; i<3; i++)
        if (a[i] < a[min]) min = i;
    return min;
}


int cost(int i, int j){
    int weight[rows][cols]={
        {3,4,1,2,8,6},
        {6,1,8,2,7,4},
        {5,9,3,9,9,5},
        {8,4,1,3,2,6},
        {3,7,2,8,6,4}};
    
    if (j==0) return m[i][j] = weight[i][j];
    if (m[i][j]!=0) return m[i][j];
    
    int left = cost(i, j-1)+weight[i][j];
    int up = cost((i+5-1)%5, j-1)+weight[i][j];
    int down = cost((i+1)%5, j-1)+weight[i][j];
    
    return m[i][j] = min(left, up, down);
}

int main(){
    for(int i=0; i<rows; i++)
        cost(i,cols-1);
    
    int last_row;
    int min_path = m[0][5];
    for (int i=0; i<rows; i++)
        if (m[i][5] < min_path) {
            min_path = m[i][5];
            last_row = i;}
    
    cout << "The shortest path is of length "<< min_path <<endl;
    
    int path[cols];
    path[cols-1] = last_row; //initialize array that will store values of which row and then set last entry to last_row determined by above code
    int rowvalue=last_row; //create value to track the rowvalues so that each time the for-loop iterates it knows which 3 rows to compare
    
    for (int i=cols-1; i>0; i--){
        if (minIndex(m[rowvalue][i-1], m[(rowvalue+1)%5][i-1], m[(rowvalue+5-1)%5][i-1]) == 0) path[i-1] = rowvalue;
        if (minIndex(m[rowvalue][i-1], m[(rowvalue+1)%5][i-1], m[(rowvalue+5-1)%5][i-1]) == 1) path[i-1] = (rowvalue+1)%5;
        if (minIndex(m[rowvalue][i-1], m[(rowvalue+1)%5][i-1], m[(rowvalue+5-1)%5][i-1]) == 2) path[i-1] = (rowvalue-1+5)%5;
        rowvalue = path[i-1];
    }
    
    
    for (int i=0; i<cols-1; i++)
        cout << path[i] + 1 << " --> ";
    cout << path[cols-1]+1;
    
    
    
    return 0;
    
}
